package main

import (
	"bufio"
	"fmt"
	"os"
	"path/filepath"
	"regexp"
	"strings"
)

func main() {
	if len(os.Args) == 1 {
		panic("need a type name")
	}
	typeName := os.Args[1]

	goFile := os.Getenv("GOFILE")
	if goFile == "" {
		panic("need GOFILE")
	}
	goPackage := os.Getenv("GOPACKAGE")
	if goPackage == "" {
		panic("need GOPACKAGE")
	}

	f, err := os.Open(goFile)
	cerr(err)
	defer f.Close()

	sc := bufio.NewScanner(f)

	var scanning bool
	var columns []string

	for sc.Scan() {
		line := sc.Text()
		line = strings.TrimSpace(line)

		if line == fmt.Sprintf("type %s struct {", typeName) {
			scanning = true
			continue
		}
		if !scanning {
			continue
		}

		if line == "}" {
			scanning = false
			break
		}

		parts := strings.Fields(line)
		if len(parts) <= 1 {
			continue
		}

		columns = append(columns, parts[0])
	}

	cerr(sc.Err())

	ext := filepath.Ext(goFile)
	destName := strings.TrimSuffix(goFile, ext) + ".gen" + ext

	destf, err := os.Create(destName)
	cerr(err)
	defer destf.Close()

	firstChar := strings.ToLower(string(typeName[0]))

	fmt.Fprintf(destf, "// Code generated by \"%s %s\"; DO NOT EDIT.\n", filepath.Base(os.Args[0]), strings.Join(os.Args[1:], " "))
	fmt.Fprintf(destf, "\n")
	fmt.Fprintf(destf, "package %s\n", goPackage)
	fmt.Fprintf(destf, "\n")
	fmt.Fprintf(destf, "import \"database/sql\"\n")
	fmt.Fprintf(destf, "\n")

	fmt.Fprintf(destf, "func (%s) PrimaryKey() string {\n", typeName)
	fmt.Fprintf(destf, "\treturn \"id\"\n") // TODO: dynamic
	fmt.Fprintf(destf, "}\n")
	fmt.Fprintf(destf, "\n")

	fmt.Fprintf(destf, "func (%s %s) Values() []sql.NamedArg {\n", firstChar, typeName)

	var namedArgs []string
	for _, c := range columns {
		namedArgs = append(namedArgs, fmt.Sprintf("sql.Named(\"%s\", %s.%s)", toSnake(c), firstChar, c))
	}

	fmt.Fprintf(destf, "\treturn []sql.NamedArg{%s}\n", strings.Join(namedArgs, ", "))
	fmt.Fprintf(destf, "}\n")
	fmt.Fprintf(destf, "\n")

	fmt.Fprintf(destf, "func (%s *%s) ScanFrom(rows *sql.Rows) error {\n", firstChar, typeName)

	var dests []string
	for _, c := range columns {
		dests = append(dests, fmt.Sprintf("&%s.%s", firstChar, c))
	}

	fmt.Fprintf(destf, "\treturn rows.Scan(%s)\n", strings.Join(dests, ", "))
	fmt.Fprintf(destf, "}\n")
}

var (
	luExpr  = regexp.MustCompile(`([a-z0-9])([A-Z])`)
	uulExpr = regexp.MustCompile(`([A-Z])([A-Z][a-z])`)
)

func toSnake(s string) string {
	s = luExpr.ReplaceAllString(s, "${1}_${2}")
	s = uulExpr.ReplaceAllString(s, "${1}_${2}")
	return strings.ToLower(s)
}

func cerr(err error) {
	if err != nil {
		panic(err)
	}
}
