env GOPACKAGE=task
env GOFILE=task.go
exec sqlb Task

cmp 'task.gen.go exp' task.gen.go

-- task.go --
package task

type Task struct {
	ID int
	// we may need to update how this is handled
	Embedded struct {
		A, B string
	}
}

-- task.gen.go exp --
// Code generated by "sqlb Task"; DO NOT EDIT.

package task

import "database/sql"

func _() {
	// Validate the struct fields haven't changed. If this doesn't compile you probably need to `go generate` again.
	var t Task
	_ = Task{t.ID, t.Embedded}
}

func (Task) PrimaryKey() string {
	return "id"
}

func (t Task) Values() []sql.NamedArg {
	return []sql.NamedArg{sql.Named("id", t.ID), sql.Named("embedded", t.Embedded)}
}

func (t *Task) ScanFrom(rows *sql.Rows) error {
	columns, err := rows.Columns()
	if err != nil {
		return err
	}
	dests := make([]any, 0, len(columns))
	for _, c := range columns {
		switch c {
		case "id":
			dests = append(dests, &t.ID)
		case "embedded":
			dests = append(dests, &t.Embedded)
		default:
			return fmt.Errorf("unknown column name %q", c)
		}
	}
	return rows.Scan(dests...)
}
